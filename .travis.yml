language: c
sudo: false

# Notify the site to update itself upon successful build.
notifications:
  webhooks: http://45.33.68.74/travis-ci
  on_success: always
  on_failure: never
  on_start: never
  on_cancel: never
  on_error: never

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $HOME/.cabal/packages/head.hackage

# matrix:
#   include:
#     - compiler: "ghc-8.2.2"
#     # env: TEST=--disable-tests BENCH=--disable-benchmarks
#       addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.2.2], sources: [hvr-ghc]}}

before_install:
  - true
  # - HC=${CC}
  # - HCPKG=${HC/ghc/ghc-pkg}
  # - unset CC
  # - ROOTDIR=$(pwd)
  # - mkdir -p $HOME/.local/bin
  # - "PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$HOME/local/bin:$PATH"
  # - HCNUMVER=$(( $(${HC} --numeric-version|sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+).*/\1 * 10000 + \2 * 100 + \3/') ))
  # - echo $HCNUMVER

install:
  - true
  # - cabal --version
  # - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  # - BENCH=${BENCH---enable-benchmarks}
  # - TEST=${TEST---enable-tests}
  # - HADDOCK=${HADDOCK-true}
  # - INSTALLED=${INSTALLED-true}
  # - GHCHEAD=${GHCHEAD-false}
  # - travis_retry cabal update -v
  # - "sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config"
  # - rm -fv cabal.project cabal.project.local
  # - grep -Ev -- '^\s*--' ${HOME}/.cabal/config | grep -Ev '^\s*$'
  # - "printf 'packages: \".\"\\n' > cabal.project"
  # - cat cabal.project
  # - if [ -f "./configure.ac" ]; then
  #     (cd "." && autoreconf -i);
  #   fi
  # - rm -f cabal.project.freeze
  # - cabal new-build -w ${HC} ${TEST} ${BENCH} --project-file="cabal.project" --dep -j2 -O0 all
  # - cabal new-build -w ${HC} --disable-tests --disable-benchmarks --project-file="cabal.project" --dep -j2 -O0 all
  # - rm -rf .ghc.environment.* "."/dist
  # - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)

script:
  - true
  # - (cd "." && cabal sdist)
  # - mv "."/dist/snowdrift-*.tar.gz ${DISTDIR}/
  # - cd ${DISTDIR} || false
  # - find . -maxdepth 1 -name '*.tar.gz' -exec tar -xvf '{}' \;
  # - "printf 'packages: snowdrift-*/*.cabal\\n' > cabal.project"
  # - cat cabal.project
  # - cabal new-build -w ${HC} --disable-tests --disable-benchmarks -O0 all
  # - if $INSTALLED; then echo cabal new-build -w ${HC} --disable-tests --disable-benchmarks $(${HCPKG} list --global --simple-output --names-only | sed 's/\([a-zA-Z0-9-]\{1,\}\) */--constraint="\1 installed" /g') all | sh; else echo "Not building with installed constraints"; fi
  # - cabal new-build -w ${HC} ${TEST} ${BENCH} -O0 all
  # - (cd snowdrift-* && cabal check)
  # - rm -rf ./dist-newstyle
  # - if $HADDOCK; then cabal new-haddock -w ${HC} ${TEST} ${BENCH} -O0 all; else echo "Skipping haddock generation";fi

# REGENDATA ["snowdrift.cabal"]
# EOF
